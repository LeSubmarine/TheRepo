import pygame
from pygame.locals import *
import random
import math
class App:
    def __init__(self):
        self._running = True
        self._display_surf = None
        self.size = self.weight, self.height = 640, 400
 
    def on_init(self):
        pygame.init()
        self._display_surf = pygame.display.set_mode(self.size, pygame.HWSURFACE | pygame.DOUBLEBUF)
        self._running = True
 
    def on_event(self, event):
        if event.type == pygame.QUIT:
            self._running = False
    def on_loop(self):
        pass
    def on_render(self):
        pass
    def on_cleanup(self):
        pygame.quit()
 
    def on_execute(self):
        if self.on_init() == False:
            self._running = False
 
        while( self._running ):
            for event in pygame.event.get():
                self.on_event(event)
            self.on_loop()
            self.on_render()
        self.on_cleanup()

class Character(object):
	turn = 0
	crit = False
	def __init__(self,name,strength,agility,damage_range):
		self.name = name
		self.strength = strength
		self.agility = agility
		self.damage_range = damage_range
	def attack(self):
		if math.log10(random.randint(1,100)) + (self.agility * 0.004) > 2:
			self.crit = True
		#evt. dodge/hit mechanic
		damage_dealt = self.strength/45 * self.damage[0]
		damage_dealt = damage_dealt + (self.damage[1] * (1 / math.log10(random.randint(1,20))))
		if self.crit:
			damage_dealt = damage_dealt * 4
			self.crit = False
			return [damage_dealt,True]
		else:
			return [damage_dealt,False]

player = Character("Warrior",40,40,[600,700])
 
if __name__ == "__main__" :
    theApp = App()
    theApp.on_execute()


while True:
	events()
	loop()
	render()
